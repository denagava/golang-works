package main

import (
	"context"
	"crypto/sha256"
	"encoding/hex"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"path/filepath"
	"strconv"
	"strings"
	"syscall"
	"time"
)

type Block struct {
	Index     int
	Timestamp string
	Data      string
	PrevHash  string
	Hash      string
	Nonce     int
}

type Blockchain struct {
	Chain []Block
}

const (
	Difficulty = 4
)

var (
	blockchain     Blockchain
	blockchainFile = "blockchain.json"
)

func init() {
	loadBlockchain()
	if len(blockchain.Chain) == 0 {
		genesisBlock := Block{
			Index:     0,
			Timestamp: time.Now().Format(time.RFC3339),
			Data:      "Genesis Block",
			PrevHash:  "0",
			Nonce:     0,
		}
		genesisBlock.Hash = calculateHash(genesisBlock)
		blockchain = Blockchain{Chain: []Block{genesisBlock}}
		saveBlockchain()
	}
}

func calculateHash(block Block) string {
	record := strconv.Itoa(block.Index) + block.Timestamp + block.Data + block.PrevHash + strconv.Itoa(block.Nonce)
	h := sha256.New()
	h.Write([]byte(record))
	hashed := h.Sum(nil)
	return hex.EncodeToString(hashed)
}

func mineBlock(lastBlock Block, data string) Block {
	newBlock := Block{
		Index:     lastBlock.Index + 1,
		Timestamp: time.Now().Format(time.RFC3339),
		Data:      data,
		PrevHash:  lastBlock.Hash,
		Nonce:     0,
	}

	for i := 0; ; i++ {
		newBlock.Nonce = i
		hash := calculateHash(newBlock)
		if isHashValid(hash) {
			newBlock.Hash = hash
			fmt.Printf("Block mined! Nonce: %d, Hash: %s\n", i, hash)
			break
		}
	}
	return newBlock
}

func isHashValid(hash string) bool {
	prefix := strings.Repeat("0", Difficulty)
	return strings.HasPrefix(hash, prefix)
}

func addBlock(newBlock Block) {
	lastBlock := blockchain.Chain[len(blockchain.Chain)-1]

	if newBlock.PrevHash != lastBlock.Hash {
		log.Println("Invalid block: previous hash mismatch")
		return
	}

	if !isHashValid(newBlock.Hash) {
		log.Println("Invalid block: hash doesn't meet difficulty requirements")
		return
	}

	blockchain.Chain = append(blockchain.Chain, newBlock)
	saveBlockchain()
}

//================= REST API =================

func getChainHandler(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(blockchain.Chain)
}

func mineHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != "POST" {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	var req struct {
		Data string `json:"data"`
	}

	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	lastBlock := blockchain.Chain[len(blockchain.Chain)-1]
	newBlock := mineBlock(lastBlock, req.Data)
	addBlock(newBlock)

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(newBlock)
}

func validateHandler(w http.ResponseWriter, r *http.Request) {
	isValid := true
	for i := 1; i < len(blockchain.Chain); i++ {
		currentBlock := blockchain.Chain[i]
		prevBlock := blockchain.Chain[i-1]

		if calculateHash(currentBlock) != currentBlock.Hash {
			isValid = false
			break
		}
		if currentBlock.PrevHash != prevBlock.Hash {
			isValid = false
			break
		}
		if !isHashValid(currentBlock.Hash) {
			isValid = false
			break
		}
	}

	response := map[string]bool{"is_valid": isValid}
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(response)
}

func shutdownHandler(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "text/plain")
	fmt.Fprint(w, "Server is shutting down...")
	time.Sleep(100 * time.Millisecond)
	interruptChan <- os.Interrupt
}

func saveBlockchain() {
	data, err := json.MarshalIndent(blockchain, "", "  ")
	if err != nil {
		log.Printf("Error marshalling blockchain: %v", err)
		return
	}

	absPath, _ := filepath.Abs(blockchainFile)
	if err := os.WriteFile(absPath, data, 0644); err != nil {
		log.Printf("Error saving blockchain to %s: %v", absPath, err)
	}
}

func loadBlockchain() {
	absPath, _ := filepath.Abs(blockchainFile)
	data, err := os.ReadFile(absPath)
	if err != nil {
		if os.IsNotExist(err) {
			log.Printf("No blockchain file at %s, creating new", absPath)
			return
		}
		log.Printf("Error reading blockchain file: %v", err)
		return
	}

	if err := json.Unmarshal(data, &blockchain); err != nil {
		log.Printf("Error unmarshalling blockchain: %v", err)
	}
}

var interruptChan = make(chan os.Signal, 1)

func main() {
	log.Println("Starting application...")
	http.HandleFunc("/blocks", getChainHandler)
	http.HandleFunc("/mine", mineHandler)
	http.HandleFunc("/validate", validateHandler)
	http.HandleFunc("/shutdown", shutdownHandler)

	server := &http.Server{
		Addr:         ":8080",
		ReadTimeout:  10 * time.Second,
		WriteTimeout: 10 * time.Second,
	}

	signal.Notify(interruptChan, os.Interrupt, syscall.SIGTERM)

	go func() {
		log.Println("Starting server on port 8080")
		log.Println("Endpoints:")
		log.Println("  GET    /blocks   - Get blockchain")
		log.Println("  POST   /mine     - Mine new block")
		log.Println("  GET    /validate - Validate blockchain")
		log.Println("  GET    /shutdown - Shutdown server")

		if err := server.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Fatalf("Server error: %v", err)
		}
	}()

	sig := <-interruptChan
	log.Printf("Received signal: %v. Shutting down...", sig)

	saveBlockchain()

	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	if err := server.Shutdown(ctx); err != nil {
		log.Fatal("Server shutdown error:", err)
	}
	log.Println("Server gracefully stopped")
}
